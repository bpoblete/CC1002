# -*- coding: utf-8 -*-
"""C17 - Estructuras Indexadas II.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qcJZmA4oJPufnTNM-XL1YLz0OwRkn8nH

# Clase 17: Estructuras Indexadas (parte II)

## Funciones para listas

Notas:
- L se considera un alias del argumento
- si se modifica parámetro L dentro de la función afecta también al argumento (lista) utilizado en la invocación

### Ejemplo: Sumar valores de una lista
"""

#suma: list (num) -> num
#sumar numeros de una lista
#ej: suma([20,30,10])->60

def suma(L):
    assert type(L)==list
    total=0
    for valor in L:
        total = total + valor # total+=valor
    return total

assert suma([20,30,10])==60

# usando range
def suma(L):
    assert type(L)==list
    total=0
    for i in range(len(L)): # [0,1,..,len(L)-1]
        total = total + L[i]
    return total

assert suma([20,30,10])==60

"""### Ej. Indicar el índice de una lista donde se encuentra cierto valor"""

#indice: any list(any) -> int
#indice (desde 0) de 1ª aparición de x en L
#-1 si no está
#ej: indice(30,[20,30,10])->1

def indice(x,L):
    assert type(L)==list
    for i in range(len(L)): #[0,1,..,len(L)-1]->[0,1,2]
        if L[i]==x: return i
    return -1

assert indice(30,[20,30,10]) == 1
assert indice(40,[20,30,10]) == -1

"""### ¿Cómo imprimir los valores de una lista?"""

L = [10, 20, 30, 40, 50,60,70]
for valor in L:
  print(valor)

"""### Ej. Realizar una copia 'efectiva' de una lista"""

#copia: list -> list
def copia(L):
    assert type(L)==list
    duplicado=[]
    for valor in L:
      duplicado.append(valor)
    return duplicado
    

assert copia([8,9,7,9])==[8,9,7,9]

"""## Instrucción 'while'

Esta instrucción es más general que la instrucción **`for`** y permite iterar sobre un bloque de instrucciónes, su sintaxis es:

```python
while condicion: # condición es de tipo boolean
    # bloque de instrucciones
    
```

las instrucciones del ciclo **`while`** se ejecutarán mientras **`condición`** sea igual a **`True`**.
"""

lista = [10,20 ,30, 40, 50]
indice = 0
while indice < len(lista):
    print (lista[indice])
    indice = indice +1

#suma: list(int) -> int
def suma(L):
    assert type(L)==list
    suma = 0
    indice = 0
    while indice < len(L):
        suma+= L[indice]
        indice+=1
    return suma

assert suma([8,9,7,9])==33

"""## Strings son listas inmutables

Los strings operan como una estructura indexada de caracteres. Es decir, una lista de caracteres inmutable:
"""

palabra = "algoritmo"
palabra[2]

otrapalabra = "ALGORITMO"
palabra+otrapalabra

len(palabra)

palabra < otrapalabra

'a'>'A'

palabra[2:len(palabra)]

'a' in palabra

palabra = "algoritmo"
for caracter in palabra:
    print (caracter)

def inverso(x):
    s = ''
    for i in  range(len(x)-1,-1, -1):
        s = s + x[i]
    return s
assert inverso("roma")=="amor"

inverso('hola')

def inverso(x):
    s =''
    for c in x: 
      s=c+s 
    return s

assert inverso("roma")=="amor"

def capicua(x): 
    return x==inverso(x)
assert capicua("reconocer")

"""### otras funciones de python para strings"""

x = "operaciones de strings en python"

x.find("s")

x.count("s")

x.isalpha()

x.islower()

x.isupper()

x.upper()

x.lower()

y = " " + x + " "
y

y.strip()

x.replace("o","s")

"""### Ej. ¿Cómo ver si una frase es capicúa?"""

def fraseCapicua(frase):
    frase=frase.replace(" ", "") #eliminar espacios
    frase=frase.lower()  #todo a minusculas
    return capicua(frase)
assert fraseCapicua("Anita lava la tina")

"""## Lista de listas (lista de 2 dimensiones o tabla o matriz)"""

T=[["gabriela","jose","rosa","matias"],\
   [62,48,56,49],\
   [45,52,35,48]]
#promedios por pregunta (por filas)
for i in range(1,len(T)):
    print ("promedio pregunta",i,float(sum(T[i]))/len(T[i]))

#promedios por alumno (por columnas)
for j in range(len(T[0])):
    s=0.0
    for i in range(1,len(T)):
        s+=T[i][j]
    print ("promedio: ",T[0][j],s/(len(T)-1))