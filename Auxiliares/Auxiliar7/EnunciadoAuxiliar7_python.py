# -*- coding: utf-8 -*-
"""Auxiliar 7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1opXitv5Xqz7aDTksFkculEtj7VOuu10P

# Auxiliar 7
"""

from estructura import *
from lista import *
from abb import *

"""**P1**

Cree la función ***filtrarXY(abb, x, y)***, que dado un árbol de búsqueda binaria *abb*, retorna un nuevo árbol de búsqueda binaria que contenga solo aquellos valores de *abb* que están en el rango [x, y] (ambos incluidos). Recuerde realizar la receta de diseño y los asserts de su función
"""



"""**P2**

Programe la función ***multiplos(abb, k)***, que dado un ABB de números enteros y un entero *k*, retorne una lista enlazada ordenada con todos aquellos valores de *abb* que sean múltiplo de *k*. Recuerde realizar la receta de diseño y los asserts de su función
"""



"""**P3**

En esta pregunta simularemos una agenda telefónica en formato ABB, por lo que cada valor del árbol será una persona (que tiene nombre, apellido y número telefónico). Usted debe considerar que el árbol se ordena en base al apellido de la persona, si dos personas tienen el mismo apellido entonces habrá que ordenar en base al nombre. Además, no habrán dos personas con mismo nombre y apellido en la agenda telefónica.

En base a lo anterior, usted deberá programar 3 funciones que permitirán simular ciertas funcionalidades de una agenda telefónica:



1.   Cree la estructura *Persona*, la cual debe tener *nombre*, *apellido* y *telefono*
2.   Cree la función ***agregarContacto(abb, p)***, la cual retorna un nuevo ABB pero con la persona *p* insertada en este.
3.   Cree la función ***listaTelefonicaPorApellido(abb, apellido)*** que retorna una lista enlazada ordenada con todos los contactos (personas) que tengan dicho apellido.
4.   Cree la función ***ConsultarTelefono(abb, apellido, nombre)***, que dado el nombre y apellido de una persona retorne el número telefónico de dicha persona.
"""

# 1.

# 2.

# 3.

# 4.